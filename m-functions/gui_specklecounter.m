function varargout = gui_specklecounter(varargin)
% GUI_SPECKLECOUNTER  Brief description.
%                     User interface to count specles given an input image file.

% Leave a blank line following the help.

% Initialization tasks
%  Create and then hide the GUI as it is being constructed.
fig_gui = figure('Visible','on',...
    'Name','Speckles counter',...
    'NumberTitle','off',...
    'Position',[100 100 1100 500]);

% Construct the components
% - panels
h_panel_results=uipanel('Title','Results','Parent',fig_gui,...
    'FontSize',11,'Backgroundcolor',get(fig_gui,'color'),...
    'Position',[.83,.05,.15,.92]);
h_panel_controls=uipanel('Title','Control','Parent',fig_gui,...
    'FontSize',11,'Backgroundcolor',get(fig_gui,'color'),...
    'Position',[.02,.05,.12,.92]);
h_panel_image=uipanel('Title','Viewer','Parent',fig_gui,...
    'FontSize',11,'Backgroundcolor',get(fig_gui,'color'),...
    'Position',[.15,.05,.67,.92]);

% - components inside image panel
ax_view=axes('Parent',h_panel_image,...
    'units','normalized','Position',[.0 .05 .5 .76],...
    'box','on','xtick',[],'ytick',[]);
ax_thres=axes('Parent',h_panel_image,...
    'units','normalized','Position',[.5 .05 .5 .76],...
    'box','on','xtick',[],'ytick',[]);
h_text_nodata=uicontrol('Style','text',...
    'Parent',h_panel_image,...
    'String','No data',...
    'Units','normalized','Position',[.1 .5 .8 .1],...
    'fontsize',30,'horizontalalignment','center',...
    'Visible','off',...
    'backgroundcolor',get(fig_gui,'color'));
h_text_frame=uicontrol('Style','text',...
    'Parent',h_panel_image,...
    'String','Frame 1',...
    'Units','normalized','Position',[.1 .9 .8 .08],...
    'fontsize',10,'horizontalalignment','center',...
    'backgroundcolor',get(fig_gui,'color'));

% - components inside control panel
h_button_previousFrame = uicontrol('Style','Pushbutton',...
    'Parent',h_panel_controls,...
    'String','Previous','Fontsize',10,...
    'Units','normalized','Position',[.1 .9 .82 .08],...
    'Callback',{@callback_showPreviousFrame});
h_button_nextFrame = uicontrol('Style','Pushbutton',...
    'Parent',h_panel_controls,...
    'String','Next','Fontsize',10,...
    'Units','normalized','Position',[.1 .8 .82 .08],...
    'Callback',{@callback_showNextFrame});
h_button_save = uicontrol('Style','Pushbutton',...
    'Parent',h_panel_controls,...
    'String','Save','Fontsize',10,...
    'Units','normalized','Position',[.1 .13 .82 .08],...
    'Callback',{@callback_showNextFrame});
h_button_exit = uicontrol('Style','Pushbutton',...
    'Parent',h_panel_controls,...
    'String','Exit','Fontsize',10,...
    'Units','normalized','Position',[.1 .03 .82 .08],...
    'Callback',{@callback_quit});
h_text_slider=uicontrol('Style','text',...
    'Parent',h_panel_controls,...
    'String','Threshold','Fontsize',10,...
    'Units','normalized','Position',[.1 .65 .82 .05],...
    'Horizontalalignment','center',...
    'Backgroundcolor',get(fig_gui,'color'));
h_text_threshold=uicontrol('Style','text',...
    'Parent',h_panel_controls,...
    'String','0.50','Fontsize',10,...
    'Units','normalized','Position',[.1 .6 .82 .05],...
    'Horizontalalignment','center',...
    'Backgroundcolor',get(fig_gui,'color'));
h_slider_thres = uicontrol('Style','slider',...
    'Parent',h_panel_controls,...
    'Min',0,'Max',1,'Value',0.5,...
    'Units','normalized','Position',[.05 .55 .9 .05],...
    'String','Threshold',...
    'Callback',{@callback_changeThreshold,h_text_threshold});
h_text_sliderFrame=uicontrol('Style','text',...
    'Parent',h_panel_controls,...
    'String','Select frame','Fontsize',10,...
    'Units','normalized','Position',[.1 .45 .82 .05],...
    'Horizontalalignment','center',...
    'Backgroundcolor',get(fig_gui,'color'));
h_slider_frame = uicontrol('Style','slider',...
    'Parent',h_panel_controls,...
    'Min',0,'Max',1,'Value',1,...
    'Units','normalized','Position',[.05 .4 .9 .05],...
    'String','Threshold',...
    'Callback',{@callback_changeFrame});


% Initialization tasks
if(isempty(varargin))
    set(ax_view,'Visible','off');
    set(ax_thres,'Visible','off');
    set(h_text_frame,'Visible','off');
    set(h_text_nodata,'Visible','on');
    data=[];
    frameid=[];
else
    data=varargin{1};
end

if(~isempty(data))
    frameid=1;
    framesN=size(data,3);
    thres_val=0.5;
    set(h_slider_frame,'Min',0,'Max',framesN);
    updateViewer(frameid);
end

% Callbacks for gui
    function callback_showPreviousFrame(~,~)
        if(isempty(data))
            return;
        end
        frameid=max(1,frameid-1);
        updateViewer(frameid);
    end

    function callback_showNextFrame(~,~)
        if(isempty(data))
            return;
        end
        frameid=min(framesN,frameid+1);
        updateViewer(frameid);
    end

    function callback_quit(~,~)
        close all;
    end

    function callback_changeThreshold(src,~,hleg)
        val=get(src,'Value');
        set(hleg,'String',num2str(val,'%0.2f'));
        if(isempty(data))
            return;
        end
        thres_val=val;
        updateViewer(frameid);
    end

    function callback_changeFrame(src,~)
        if(isempty(data))
            return;
        end
        val=get(src,'Value');
        val=round(val);
        val=max(1,min(val,framesN));
        frameid=val;
        updateViewer(frameid);
    end


% Utility functions for gui
    function updateViewer(id)
        % Get image
        I=data(:,:,id);
        
        % Normalize image
        I=double(I);
        I=I-min(min(I));
        I=I/max(max(I));
        
        % Apply threshold
        I_thres=false(size(I));
        I_thres(I>thres_val)=true;
        
        % Show original image
        axes(ax_view);
        imshow(I);
        
        % Show thresholded image
        axes(ax_thres);
        imshow(I_thres);
        
        % Update frame information
        set(h_text_frame,'String',['Frame ',num2str(frameid),'/',num2str(framesN)]);
    end

end
